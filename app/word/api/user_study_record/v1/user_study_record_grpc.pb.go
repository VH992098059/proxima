// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: user_study_record/v1/user_study_record.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserStudyRecord_InsertRecord_FullMethodName = "/user_study_record.v1.UserStudyRecord/insert_record"
	UserStudyRecord_UpdateRecord_FullMethodName = "/user_study_record.v1.UserStudyRecord/update_record"
	UserStudyRecord_SearchRecord_FullMethodName = "/user_study_record.v1.UserStudyRecord/search_record"
	UserStudyRecord_DeleteRecord_FullMethodName = "/user_study_record.v1.UserStudyRecord/delete_record"
)

// UserStudyRecordClient is the client API for UserStudyRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStudyRecordClient interface {
	InsertRecord(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*InsertRes, error)
	UpdateRecord(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	SearchRecord(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error)
	DeleteRecord(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
}

type userStudyRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStudyRecordClient(cc grpc.ClientConnInterface) UserStudyRecordClient {
	return &userStudyRecordClient{cc}
}

func (c *userStudyRecordClient) InsertRecord(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*InsertRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertRes)
	err := c.cc.Invoke(ctx, UserStudyRecord_InsertRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyRecordClient) UpdateRecord(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, UserStudyRecord_UpdateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyRecordClient) SearchRecord(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRes)
	err := c.cc.Invoke(ctx, UserStudyRecord_SearchRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyRecordClient) DeleteRecord(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRes)
	err := c.cc.Invoke(ctx, UserStudyRecord_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStudyRecordServer is the server API for UserStudyRecord service.
// All implementations must embed UnimplementedUserStudyRecordServer
// for forward compatibility.
type UserStudyRecordServer interface {
	InsertRecord(context.Context, *InsertReq) (*InsertRes, error)
	UpdateRecord(context.Context, *UpdateReq) (*UpdateRes, error)
	SearchRecord(context.Context, *SearchReq) (*SearchRes, error)
	DeleteRecord(context.Context, *DeleteReq) (*DeleteRes, error)
	mustEmbedUnimplementedUserStudyRecordServer()
}

// UnimplementedUserStudyRecordServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserStudyRecordServer struct{}

func (UnimplementedUserStudyRecordServer) InsertRecord(context.Context, *InsertReq) (*InsertRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRecord not implemented")
}
func (UnimplementedUserStudyRecordServer) UpdateRecord(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedUserStudyRecordServer) SearchRecord(context.Context, *SearchReq) (*SearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecord not implemented")
}
func (UnimplementedUserStudyRecordServer) DeleteRecord(context.Context, *DeleteReq) (*DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedUserStudyRecordServer) mustEmbedUnimplementedUserStudyRecordServer() {}
func (UnimplementedUserStudyRecordServer) testEmbeddedByValue()                         {}

// UnsafeUserStudyRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStudyRecordServer will
// result in compilation errors.
type UnsafeUserStudyRecordServer interface {
	mustEmbedUnimplementedUserStudyRecordServer()
}

func RegisterUserStudyRecordServer(s grpc.ServiceRegistrar, srv UserStudyRecordServer) {
	// If the following call pancis, it indicates UnimplementedUserStudyRecordServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserStudyRecord_ServiceDesc, srv)
}

func _UserStudyRecord_InsertRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyRecordServer).InsertRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyRecord_InsertRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyRecordServer).InsertRecord(ctx, req.(*InsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyRecord_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyRecordServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyRecord_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyRecordServer).UpdateRecord(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyRecord_SearchRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyRecordServer).SearchRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyRecord_SearchRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyRecordServer).SearchRecord(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyRecord_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyRecordServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyRecord_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyRecordServer).DeleteRecord(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStudyRecord_ServiceDesc is the grpc.ServiceDesc for UserStudyRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStudyRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_study_record.v1.UserStudyRecord",
	HandlerType: (*UserStudyRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "insert_record",
			Handler:    _UserStudyRecord_InsertRecord_Handler,
		},
		{
			MethodName: "update_record",
			Handler:    _UserStudyRecord_UpdateRecord_Handler,
		},
		{
			MethodName: "search_record",
			Handler:    _UserStudyRecord_SearchRecord_Handler,
		},
		{
			MethodName: "delete_record",
			Handler:    _UserStudyRecord_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_study_record/v1/user_study_record.proto",
}
