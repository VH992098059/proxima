@startuml
namespace account {
    class Controller << (S,Aquamarine) >> {
        + UserRegister(ctx context.Context, req *v1.UserRegisterReq) (*v1.UserRegisterRes, error)
        + UserLogin(ctx context.Context, req *v1.UserLoginReq) (*v1.UserLoginRes, error)

    }
    class jwtClaims << (S,Aquamarine) >> {
        + Id uint
        + Username string

    }
}
"v1.UnimplementedAccountServer" *-- "account.Controller"
"jwt.RegisteredClaims" *-- "account.jwtClaims"


namespace account_edit_delete {
    class Controller << (S,Aquamarine) >> {
        + UpdateUser(ctx context.Context, req *v1.UpdateUserReq) (*v1.UpdateUserRes, error)
        + DeleteUser(ctx context.Context, req *v1.DeleteUserReq) (*v1.DeleteUserRes, error)

    }
}
"v1.UnimplementedAccountEditDeleteServer" *-- "account_edit_delete.Controller"

"user_edit_delete.IUserEditDeleteV1" <|-- "account_edit_delete.Controller"

namespace account_logout {
    class Controller << (S,Aquamarine) >> {
        + Logout(ctx context.Context, req *v1.LogoutUserReq) (*v1.LogoutUserRes, error)

    }
}
"v1.UnimplementedAccountLogoutServer" *-- "account_logout.Controller"


namespace dao {
    class dao.internalUsersDao << (T, #FF7700) >>  {
    }
    class dao.internalWordsDao << (T, #FF7700) >>  {
    }
    class usersDao << (S,Aquamarine) >> {
    }
    class wordsDao << (S,Aquamarine) >> {
    }
    class "*internal.UsersDao" as internalUsersDao {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "*internal.WordsDao" as internalWordsDao {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}
"dao.internalUsersDao" *-- "dao.usersDao"
"dao.internalWordsDao" *-- "dao.wordsDao"


namespace do {
    class Users << (S,Aquamarine) >> {
        + Id <font color=blue>interface</font>{}
        + Username <font color=blue>interface</font>{}
        + Password <font color=blue>interface</font>{}
        + Email <font color=blue>interface</font>{}
        + CreatedAt *gtime.Time
        + UpdatedAt *gtime.Time
        + DeletedAt *gtime.Time

    }
    class Words << (S,Aquamarine) >> {
        + Id <font color=blue>interface</font>{}
        + Uid <font color=blue>interface</font>{}
        + Word <font color=blue>interface</font>{}
        + Definition <font color=blue>interface</font>{}
        + ExampleSentence <font color=blue>interface</font>{}
        + ChineseTranslation <font color=blue>interface</font>{}
        + Pronunciation <font color=blue>interface</font>{}
        + CreatedAt *gtime.Time
        + UpdatedAt *gtime.Time

    }
}
"g.Meta" *-- "do.Users"
"g.Meta" *-- "do.Words"


namespace entity {
    class Users << (S,Aquamarine) >> {
        + Id uint
        + Username string
        + Password string
        + Email string
        + CreatedAt *gtime.Time
        + UpdatedAt *gtime.Time
        + DeletedAt *gtime.Time

    }
    class Words << (S,Aquamarine) >> {
        + Id uint
        + Uid uint
        + Word string
        + Definition string
        + ExampleSentence string
        + ChineseTranslation string
        + Pronunciation string
        + CreatedAt *gtime.Time
        + UpdatedAt *gtime.Time

    }
}


namespace internal {
    class UsersColumns << (S,Aquamarine) >> {
        + Id string
        + Username string
        + Password string
        + Email string
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt string

    }
    class UsersDao << (S,Aquamarine) >> {
        - table string
        - group string
        - columns UsersColumns

        + DB() gdb.DB
        + Table() string
        + Columns() UsersColumns
        + Group() string
        + Ctx(ctx context.Context) *gdb.Model
        + Transaction(ctx context.Context, f <font color=blue>func</font>(context.Context, gdb.TX) error) error

    }
    class WordsColumns << (S,Aquamarine) >> {
        + Id string
        + Uid string
        + Word string
        + Definition string
        + ExampleSentence string
        + ChineseTranslation string
        + Pronunciation string
        + CreatedAt string
        + UpdatedAt string

    }
    class WordsDao << (S,Aquamarine) >> {
        - table string
        - group string
        - columns WordsColumns

        + DB() gdb.DB
        + Table() string
        + Columns() WordsColumns
        + Group() string
        + Ctx(ctx context.Context) *gdb.Model
        + Transaction(ctx context.Context, f <font color=blue>func</font>(context.Context, gdb.TX) error) error

    }
}


namespace pbentity {
    class Users << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id uint32
        + Username string
        + Password string
        + Email string
        + CreatedAt *timestamppb.Timestamp
        + UpdatedAt *timestamppb.Timestamp
        + DeletedAt *timestamppb.Timestamp

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() uint32
        + GetUsername() string
        + GetPassword() string
        + GetEmail() string
        + GetCreatedAt() *timestamppb.Timestamp
        + GetUpdatedAt() *timestamppb.Timestamp
        + GetDeletedAt() *timestamppb.Timestamp

    }
    class Words << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id uint32
        + Uid uint32
        + Word string
        + Definition string
        + ExampleSentence string
        + ChineseTranslation string
        + Pronunciation string
        + CreatedAt *timestamppb.Timestamp
        + UpdatedAt *timestamppb.Timestamp

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() uint32
        + GetUid() uint32
        + GetWord() string
        + GetDefinition() string
        + GetExampleSentence() string
        + GetChineseTranslation() string
        + GetPronunciation() string
        + GetCreatedAt() *timestamppb.Timestamp
        + GetUpdatedAt() *timestamppb.Timestamp

    }
}


namespace user {
    class ControllerV1 << (S,Aquamarine) >> {
        + AccountClient v1.AccountClient

        + Login(ctx context.Context, req *v1.LoginReq) (*v1.LoginRes, error)
        + Register(ctx context.Context, req *v1.RegisterReq) (*v1.RegisterRes, error)

    }
    interface IUserV1  {
        + Login(ctx context.Context, req *v1.LoginReq) (*v1.LoginRes, error)
        + Register(ctx context.Context, req *v1.RegisterReq) (*v1.RegisterRes, error)

    }
}

"user.IUserV1" <|-- "user.ControllerV1"

namespace user_edit_delete {
    class ControllerV1 << (S,Aquamarine) >> {
        + AccountEditDelete v1.AccountEditDeleteClient

        + DeleteUser(ctx context.Context, req *v1.DeleteUserReq) (*v1.DeleteUserRes, error)
        + UpdateUser(ctx context.Context, req *v1.UpdateUserReq) (*v1.UpdateUserRes, error)

    }
    interface IUserEditDeleteV1  {
        + UpdateUser(ctx context.Context, req *v1.UpdateUserReq) (*v1.UpdateUserRes, error)
        + DeleteUser(ctx context.Context, req *v1.DeleteUserReq) (*v1.DeleteUserRes, error)

    }
}

"user_edit_delete.IUserEditDeleteV1" <|-- "user_edit_delete.ControllerV1"

namespace user_logout {
    class ControllerV1 << (S,Aquamarine) >> {
        + AccountLogout v1.AccountLogoutClient

        + Logout(ctx context.Context, req *v1.LogoutReq) (*v1.LogoutRes, error)

    }
    interface IUserLogoutV1  {
        + Logout(ctx context.Context, req *v1.LogoutReq) (*v1.LogoutRes, error)

    }
}

"user_logout.IUserLogoutV1" <|-- "user_logout.ControllerV1"

namespace user_msg {
    class Controller << (S,Aquamarine) >> {
        + UserInfo(ctx context.Context, req *v1.UserInfoReq) (*v1.UserInfoRes, error)

    }
    class ControllerV1 << (S,Aquamarine) >> {
        + UserMsgClient v1.AccountMsgClient

        + UserInfo(ctx context.Context, req *v1.UserInfoReq) (*v1.UserInfoRes, error)

    }
    interface IUserMsgV1  {
        + UserInfo(ctx context.Context, req *v1.UserInfoReq) (*v1.UserInfoRes, error)

    }
    class jwtClaims << (S,Aquamarine) >> {
        + Id uint
        + Username string

    }
}
"v1.UnimplementedAccountMsgServer" *-- "user_msg.Controller"
"jwt.RegisteredClaims" *-- "user_msg.jwtClaims"

"user_msg.IUserMsgV1" <|-- "user_msg.Controller"
"user_msg.IUserMsgV1" <|-- "user_msg.ControllerV1"

namespace v1 {
    interface AccountClient  {
        + UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRes, error)
        + UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error)

    }
    interface AccountEditDeleteClient  {
        + UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
        + DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)

    }
    interface AccountEditDeleteServer  {
        - mustEmbedUnimplementedAccountEditDeleteServer() 

        + UpdateUser( context.Context,  *UpdateUserReq) (*UpdateUserRes, error)
        + DeleteUser( context.Context,  *DeleteUserReq) (*DeleteUserRes, error)

    }
    interface AccountLogoutClient  {
        + Logout(ctx context.Context, in *LogoutUserReq, opts ...grpc.CallOption) (*LogoutUserRes, error)

    }
    interface AccountLogoutServer  {
        - mustEmbedUnimplementedAccountLogoutServer() 

        + Logout( context.Context,  *LogoutUserReq) (*LogoutUserRes, error)

    }
    interface AccountMsgClient  {
        + UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)

    }
    interface AccountMsgServer  {
        - mustEmbedUnimplementedAccountMsgServer() 

        + UserInfo( context.Context,  *UserInfoReq) (*UserInfoRes, error)

    }
    interface AccountServer  {
        - mustEmbedUnimplementedAccountServer() 

        + UserRegister( context.Context,  *UserRegisterReq) (*UserRegisterRes, error)
        + UserLogin( context.Context,  *UserLoginReq) (*UserLoginRes, error)

    }
    class CreateReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Word string
        + Definition string
        + Uid uint32
        + Word string
        + Definition string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetUid() uint32
        + GetWord() string
        + GetDefinition() string

    }
    class CreateRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id uint32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() uint32

    }
    class DeleteUserReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id int
        + Id int32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() int32

    }
    class DeleteUserRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + IsDel int
        + IsDel int32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetIsDel() int32

    }
    class DetailReq << (S,Aquamarine) >> {
        + Id uint

    }
    class DetailRes << (S,Aquamarine) >> {
        + Id uint
        + Word string
        + Definition string
        + ExampleSentence string
        + ChineseTranslation string
        + Pronunciation string
        + CreatedAt *gtime.Time
        + UpdatedAt *gtime.Time

    }
    class GetReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id uint32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() uint32

    }
    class GetRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Words *pbentity.Words

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetWords() *pbentity.Words

    }
    class LoginReq << (S,Aquamarine) >> {
        + Username string
        + Password string

    }
    class LoginRes << (S,Aquamarine) >> {
        + Token string

    }
    class LogoutReq << (S,Aquamarine) >> {
        + Token string

    }
    class LogoutRes << (S,Aquamarine) >> {
        + Logout bool

    }
    class LogoutUserReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Token string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetToken() string

    }
    class LogoutUserRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Logout bool

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetLogout() bool

    }
    class RegisterReq << (S,Aquamarine) >> {
        + Username string
        + Password string
        + Email string

    }
    class RegisterRes << (S,Aquamarine) >> {
        + Id int

    }
    class UnimplementedAccountEditDeleteServer << (S,Aquamarine) >> {
        - mustEmbedUnimplementedAccountEditDeleteServer() 
        - testEmbeddedByValue() 

        + UpdateUser( context.Context,  *UpdateUserReq) (*UpdateUserRes, error)
        + DeleteUser( context.Context,  *DeleteUserReq) (*DeleteUserRes, error)

    }
    class UnimplementedAccountLogoutServer << (S,Aquamarine) >> {
        - mustEmbedUnimplementedAccountLogoutServer() 
        - testEmbeddedByValue() 

        + Logout( context.Context,  *LogoutUserReq) (*LogoutUserRes, error)

    }
    class UnimplementedAccountMsgServer << (S,Aquamarine) >> {
        - mustEmbedUnimplementedAccountMsgServer() 
        - testEmbeddedByValue() 

        + UserInfo( context.Context,  *UserInfoReq) (*UserInfoRes, error)

    }
    class UnimplementedAccountServer << (S,Aquamarine) >> {
        - mustEmbedUnimplementedAccountServer() 
        - testEmbeddedByValue() 

        + UserRegister( context.Context,  *UserRegisterReq) (*UserRegisterRes, error)
        + UserLogin( context.Context,  *UserLoginReq) (*UserLoginRes, error)

    }
    class UnimplementedWordsServer << (S,Aquamarine) >> {
        - mustEmbedUnimplementedWordsServer() 
        - testEmbeddedByValue() 

        + Create( context.Context,  *CreateReq) (*CreateRes, error)
        + Get( context.Context,  *GetReq) (*GetRes, error)

    }
    interface UnsafeAccountEditDeleteServer  {
        - mustEmbedUnimplementedAccountEditDeleteServer() 

    }
    interface UnsafeAccountLogoutServer  {
        - mustEmbedUnimplementedAccountLogoutServer() 

    }
    interface UnsafeAccountMsgServer  {
        - mustEmbedUnimplementedAccountMsgServer() 

    }
    interface UnsafeAccountServer  {
        - mustEmbedUnimplementedAccountServer() 

    }
    interface UnsafeWordsServer  {
        - mustEmbedUnimplementedWordsServer() 

    }
    class UpdateUserReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Username string
        + Password string
        + Email string
        + Username string
        + Password string
        + Email string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetUsername() string
        + GetPassword() string
        + GetEmail() string

    }
    class UpdateUserRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + IsOk int
        + IsOK int32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetIsOK() int32

    }
    class UserInfoReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Token string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetToken() string

    }
    class UserInfoRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Username string
        + Email string
        + CreateAt *timestamppb.Timestamp
        + UpdateAt *timestamppb.Timestamp
        + User *pbentity.Users

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetUser() *pbentity.Users

    }
    class UserLoginReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Username string
        + Password string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetUsername() string
        + GetPassword() string

    }
    class UserLoginRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Token string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetToken() string

    }
    class UserRegisterReq << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Username string
        + Password string
        + Email string

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetUsername() string
        + GetPassword() string
        + GetEmail() string

    }
    class UserRegisterRes << (S,Aquamarine) >> {
        - state protoimpl.MessageState
        - unknownFields protoimpl.UnknownFields
        - sizeCache protoimpl.SizeCache

        + Id int32

        + Reset() 
        + String() string
        + ProtoMessage() 
        + ProtoReflect() protoreflect.Message
        + Descriptor() ([]byte, []int)
        + GetId() int32

    }
    interface WordsClient  {
        + Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
        + Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)

    }
    interface WordsServer  {
        - mustEmbedUnimplementedWordsServer() 

        + Create( context.Context,  *CreateReq) (*CreateRes, error)
        + Get( context.Context,  *GetReq) (*GetRes, error)

    }
    class accountClient << (S,Aquamarine) >> {
        - cc grpc.ClientConnInterface

        + UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRes, error)
        + UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error)

    }
    class accountEditDeleteClient << (S,Aquamarine) >> {
        - cc grpc.ClientConnInterface

        + UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
        + DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)

    }
    class accountLogoutClient << (S,Aquamarine) >> {
        - cc grpc.ClientConnInterface

        + Logout(ctx context.Context, in *LogoutUserReq, opts ...grpc.CallOption) (*LogoutUserRes, error)

    }
    class accountMsgClient << (S,Aquamarine) >> {
        - cc grpc.ClientConnInterface

        + UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)

    }
    class wordsClient << (S,Aquamarine) >> {
        - cc grpc.ClientConnInterface

        + Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
        + Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)

    }
}
"g.Meta" *-- "v1.CreateReq"
"g.Meta" *-- "v1.DeleteUserReq"
"g.Meta" *-- "v1.DetailReq"
"g.Meta" *-- "v1.LoginReq"
"g.Meta" *-- "v1.LogoutReq"
"g.Meta" *-- "v1.RegisterReq"
"g.Meta" *-- "v1.UpdateUserReq"
"g.Meta" *-- "v1.UserInfoReq"

"user_edit_delete.IUserEditDeleteV1" <|-- "v1.UnimplementedAccountEditDeleteServer"
"v1.AccountEditDeleteServer" <|-- "v1.UnimplementedAccountEditDeleteServer"
"v1.UnsafeAccountEditDeleteServer" <|-- "v1.UnimplementedAccountEditDeleteServer"
"v1.AccountLogoutServer" <|-- "v1.UnimplementedAccountLogoutServer"
"v1.UnsafeAccountLogoutServer" <|-- "v1.UnimplementedAccountLogoutServer"
"user_msg.IUserMsgV1" <|-- "v1.UnimplementedAccountMsgServer"
"v1.AccountMsgServer" <|-- "v1.UnimplementedAccountMsgServer"
"v1.UnsafeAccountMsgServer" <|-- "v1.UnimplementedAccountMsgServer"
"v1.AccountServer" <|-- "v1.UnimplementedAccountServer"
"v1.UnsafeAccountServer" <|-- "v1.UnimplementedAccountServer"
"v1.UnsafeWordsServer" <|-- "v1.UnimplementedWordsServer"
"v1.WordsServer" <|-- "v1.UnimplementedWordsServer"
"v1.AccountClient" <|-- "v1.accountClient"
"v1.AccountEditDeleteClient" <|-- "v1.accountEditDeleteClient"
"v1.AccountLogoutClient" <|-- "v1.accountLogoutClient"
"v1.AccountMsgClient" <|-- "v1.accountMsgClient"
"v1.WordsClient" <|-- "v1.wordsClient"

namespace words {
    class Controller << (S,Aquamarine) >> {
        + Create(ctx context.Context, req *v1.CreateReq) (*v1.CreateRes, error)
        + Get(ctx context.Context, req *v1.GetReq) (*v1.GetRes, error)

    }
    class ControllerV1 << (S,Aquamarine) >> {
        + Create(ctx context.Context, req *v1.CreateReq) (*v1.CreateRes, error)
        + Detail(ctx context.Context, req *v1.DetailReq) (*v1.DetailRes, error)

    }
    interface IWordsV1  {
        + Create(ctx context.Context, req *v1.CreateReq) (*v1.CreateRes, error)
        + Detail(ctx context.Context, req *v1.DetailReq) (*v1.DetailRes, error)

    }
}
"v1.UnimplementedWordsServer" *-- "words.Controller"

"words.IWordsV1" <|-- "words.ControllerV1"

"dao.internalUsersDao" #.. "dao.internalUsersDao"
"dao.internalWordsDao" #.. "dao.internalWordsDao"
@enduml
