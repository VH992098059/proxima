// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: account_edit_delete/v1/account_edit_delete.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountEditDelete_UpdateUser_FullMethodName = "/account_edit_delete.v1.account_edit_delete/UpdateUser"
	AccountEditDelete_DeleteUser_FullMethodName = "/account_edit_delete.v1.account_edit_delete/DeleteUser"
)

// AccountEditDeleteClient is the client API for AccountEditDelete service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountEditDeleteClient interface {
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)
}

type accountEditDeleteClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountEditDeleteClient(cc grpc.ClientConnInterface) AccountEditDeleteClient {
	return &accountEditDeleteClient{cc}
}

func (c *accountEditDeleteClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRes)
	err := c.cc.Invoke(ctx, AccountEditDelete_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountEditDeleteClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRes)
	err := c.cc.Invoke(ctx, AccountEditDelete_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountEditDeleteServer is the server API for AccountEditDelete service.
// All implementations must embed UnimplementedAccountEditDeleteServer
// for forward compatibility.
type AccountEditDeleteServer interface {
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error)
	mustEmbedUnimplementedAccountEditDeleteServer()
}

// UnimplementedAccountEditDeleteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountEditDeleteServer struct{}

func (UnimplementedAccountEditDeleteServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccountEditDeleteServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAccountEditDeleteServer) mustEmbedUnimplementedAccountEditDeleteServer() {}
func (UnimplementedAccountEditDeleteServer) testEmbeddedByValue()                           {}

// UnsafeAccountEditDeleteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountEditDeleteServer will
// result in compilation errors.
type UnsafeAccountEditDeleteServer interface {
	mustEmbedUnimplementedAccountEditDeleteServer()
}

func RegisterAccountEditDeleteServer(s grpc.ServiceRegistrar, srv AccountEditDeleteServer) {
	// If the following call pancis, it indicates UnimplementedAccountEditDeleteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountEditDelete_ServiceDesc, srv)
}

func _AccountEditDelete_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountEditDeleteServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountEditDelete_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountEditDeleteServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountEditDelete_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountEditDeleteServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountEditDelete_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountEditDeleteServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountEditDelete_ServiceDesc is the grpc.ServiceDesc for AccountEditDelete service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountEditDelete_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_edit_delete.v1.account_edit_delete",
	HandlerType: (*AccountEditDeleteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _AccountEditDelete_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AccountEditDelete_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_edit_delete/v1/account_edit_delete.proto",
}
